# -*- coding: utf-8 -*-
#!/usr/bin/python
"""
Created on Mon Mar  4 16:26:42 2024
@author: Jalmari Kettunen


Change log:
20.3.2024 Set up countermeasure if user forgots to write file suffix *.xlsx.
8.5.2024 Function read_excel_sheet(): specified engine to be "openpyxl" to assure reading of *.xlsx files.
        Catch if output path is invalid. Import library os for that.
        Changed catching of invalid well name into a loop. Should be more user-friendly.
15.5.2024 Clarified printed instructions.
2.9.2024 Clarified printed instructions. Changed deprecated keyword of method to_csv().
5.9.2024 Changed keyword of to_csv() back because of installation on this particular computer.
	Works with these Python packages installed:
Package         Version
--------------- -----------
et-xmlfile      1.1.0
jdcal           1.3
numpy           1.19.5
openpyxl        2.5.7
os-sys          2.1.4
pandas          1.1.5
pip             18.1
python-dateutil 2.9.0.post0
pytz            2024.1
setuptools      40.6.2
six             1.16.0



Goals:
Read Excel workbook, extract spotting map from it. Write pattern files and pixel selection file in wanted formats.
Pattern files must be compatible with InDot software of M2 spotting instrument.
Pixel selection file must be compatible with BM Data Analysis Software.
Do all this in one command line tool that is easy to use for a non-programmer.

Code generated by ChatGPT was the the starting point of this script.
2 of prompt inputs to ChatGPT v3.5:
Write me a Python script. Script reads first sheet of a Excel workbook. Workbook is given by user. First sheet of the workbook has an area of 4 x 16 cells. All cells in this area have integers in them. Script finds this area and reads it into a NumPy array.
Write me a Python script. Find all unique integers in an existing NumPy array. For each unique integer, create a new Numpy array from which all other integers are replaced with zeros. Write each resulting NumPy array into a CSV file.

"""

import numpy as np
import pandas as pd
import os




def read_excel_sheet(file_path):
    # Initialize array.
    array = np.array([])
    
    # Read the first sheet of the Excel workbook
    try:
        # specified engine to be "openpyxl" to assure reading of *.xlsx files.
        df = pd.read_excel(file_path, sheet_name=0, header=None, engine="openpyxl")
        # Iterate through the rows of the DataFrame
        for i, row in enumerate(df.values):
            # Iterate through the columns of the row
            for j, cell in enumerate(row):
                # Check if the cell has a valid number
                if cell > -1:
                    #print(cell)
                    # Check if the area of 4 x 16 cells starts at this cell
                    if i + 3 < df.shape[0] and j + 15 < df.shape[1]:
                        # Extract the area of 4 x 16 cells
                        area = df.iloc[i:i+4, j:j+16]
                        # Convert the area to a NumPy array
                        array = np.array(area)
                        
    except FileNotFoundError:
        print("Sorry, could not find your Excel workbook. Please re-start this script and try again.")                 
    
    return array
    
    




def create_result_files(rotated_array, path, start_well):
    plate3x8 =	[
        "A1", "B1", "C1",
        "A2","B2","C2",
        "A3","B3","C3",
        "A4","B4","C4",
        "A5","B5","C5",
        "A6","B6","C6",
        "A7","B7","C7",
        "A8","B8","C8"]
    
    
    corrective_index = plate3x8.index(start_well)
    
    
    # Initialize dataframe which is to be imported to BM DASW.
    DASW_data = pd.DataFrame({
        '# pixelnumber': range(64),
        'analytenumber': [0] * 64,
        'selected': ['True'] * 64
    })
    # Define the comment line
    comment_line = "# Pixel selection and Analyte coatings"
    
    
        
    # Find the unique integers in the array
    unique_integers = np.unique(rotated_array)

    # Initialize the array of all analytes
    all_analytes = np.zeros_like(rotated_array)

    # Iterate through the unique integers
    for unique_integer in unique_integers:
        # Skip 0. No need to create a spotting map for empty pixels.
        if unique_integer > 0:
            # Create a new NumPy array with zeros
            new_array = np.zeros_like(rotated_array)
            
            
            # Populate with correct integer. Populate both master array and analyte-specific array. If 1st spotting well is A2 --> 1 translated to 4 and so on!
            all_analytes[rotated_array == unique_integer] = int(unique_integer) + corrective_index
            new_array[rotated_array == unique_integer] = int(unique_integer) + corrective_index
            
            # Find out which well ID we are at in our iteration.
            spotter_well = plate3x8[int(unique_integer) + corrective_index - 1]
            
            # Write the new array to a CSV file
            file_name = path + "/analyte_" + spotter_well + ".csv"
            np.savetxt(file_name, new_array,  fmt='%d', delimiter=",")
            print("Pattern file " + file_name + " created for analyte " + spotter_well + ".")

    # Write the populated array of all analytes.
    all_analytes_file_name = path + "/all_analytes.csv"
    np.savetxt(all_analytes_file_name, all_analytes, fmt='%d', delimiter=",")
    print("Pattern File " + all_analytes_file_name + " created for all analytes.")
    
    
    # Fill dataframe DASW_data with correct analyte numbers.
    DASW_index = 0
    for i in range(rotated_array.shape[0]-1, -1, -1):
        for j in range(rotated_array.shape[1]-1, -1, -1):
            #print(tuple((i,j)))
            DASW_data.iloc[DASW_index,1] = int(rotated_array[i, j])
            DASW_index += 1
    
    
    # Write pixel selection file for BM DASW.
    DASW_file_name = path + "/pixel_selection_for_DataAnalysisSoftware.txt"
    with open(DASW_file_name, 'w') as f:
        # Write the comment line
        f.write(comment_line + '\n')
        # Write the DataFrame to the file as tab-delimited format
        DASW_data.to_csv(f, sep='\t', index=False, line_terminator='\n')
    print("Pixel Selection File " + DASW_file_name + " created.")
    
    
    
    
    print("You can import desired Pattern Files to InDot instrument software.\nYou can import the Pixel Selection File to BM Data Analysis Software. In Data loading tab, click Read parameters --> select Coatings. Software gives a warning, you can ignore it.")

    
    
    
    
    
def main():
    # Get file paths of Excel workbook and output directory from the user. Also, get well ID of 1st spotting sample.
    print("\nJalmari Kettunen \u00A9 2024 \n\nHello. Welcome to use this script. You can quit at any time by pressing Ctrl+C (enter Y for Yes when asked).\nThis script creates files that can be imported to InDot instrument software and/or BM Data Analysis Software.\nI assume you have a 4 x 16 spotting map in 1st sheet of a Excel workbook.")
    file_path = input("(1/3) Where is your Excel workbook?\nPlease enter path (for example C:\example\example.xlsx). You can write or paste here. Press Enter when ready: ")
    # 20.3.2024 Countermeasure if user forgots to write suffix.
    if file_path.endswith('.xlsx') == False:
        file_path = file_path + ".xlsx"
        
        
        
        
    plate =	[
        "A1", "B1", "C1",
        "A2","B2","C2",
        "A3","B3","C3",
        "A4","B4","C4",
        "A5","B5","C5",
        "A6","B6","C6",
        "A7","B7","C7",
        "A8","B8","C8"]
    print("I assume you spot your samples in order: well A2 before well B2 and so on.")
    start_well = input("(2/3) Where do you put your first spotting sample in 3x8 well plate?\nPlease enter well (for example A2). You can write or paste here. Press Enter when ready: ")
    while start_well not in plate:
        print("Sorry, well name is not valid. Should be one of these: A1, B1, C1, A2, ..., A8, B8, C8. Please try again.")
        start_well = input("(2/3) Where do you put your first spotting sample in 3x8 well plate?\nPlease enter well (for example A2). You can write or paste here. Press Enter when ready: ")

    
    
    
    output_path = input("(3/3) Where would you like to save files from this script?\nPlease enter path (for example C:\example\example). You can write or paste here. Press Enter when ready: ")
    # Catch if output path is invalid.
    while not os.path.exists(output_path):
        print("Sorry, path for your files to be saved is not valid. Please try again.")
        output_path = input("(3/3) Where would you like to save files from this script?\nPlease enter path (for example C:\example\example). You can write or paste here. Press Enter when ready: ")
    
    
    # Call function to read the Excel sheet into a NumPy array
    array = read_excel_sheet(file_path)
    
    
    
    if array.size == 0:
        print("Sorry, could not find a spotting map for 4 x 16 pixel array from your Excel workbook. Please re-start this script and try again.")
    else:
        # Transpose the array into wanted format.
        transposed_array = np.transpose(array)
        rotated_array = np.flipud(transposed_array)
        
        
        
        # Call function to write separate pattern map for each analyte separately
        create_result_files(rotated_array, output_path, start_well)
        
        input("\nProgram complete. Goodbye and have a nice day. Press Enter to quit...")


if __name__ == "__main__":
    main()





